Formula: 
i1 = j;
i1 != i2;
select(a,j) = v1;
select(store(store(a,i1,v1),i2,v2),j) != select(a,j);

Options: [verbose=true, recursiveFind=true, euristicUnion=true, forbiddenSet=true]

DNF:
i1=j & i1!=i2 & select(a,j)=v1 & v2!=select(a,j) & i2=j  |  i1=j & i1!=i2 & select(a,j)=v1 & v1!=select(a,j) & i2!=j & i1=j  |  i1=j & i1!=i2 & select(a,j)=v1 & select(a,j)!=select(a,j) & i2!=j & i1!=j

List of Cubes to check:
1) i1=j ; i1!=i2 ; select(a,j)=v1 ; v2!=select(a,j) ; i2=j
2) i1=j ; i1!=i2 ; select(a,j)=v1 ; v1!=select(a,j) ; i2!=j ; i1=j
3) i1=j ; i1!=i2 ; select(a,j)=v1 ; select(a,j)!=select(a,j) ; i2!=j ; i1!=j


Solving: 
1) i1=j ; i1!=i2 ; select(a,j)=v1 ; v2!=select(a,j) ; i2=j

SF = {i1=0, i2=2, j=1, select_a=3, v1=4, v2=5}
MERGE i1 j
P1: {}
P2: {select_a(j)}
UNION i1 j
MERGE select_a(j) v1
P1: {}
P2: {}
UNION select_a(j) v1
MERGE i2 j
FORBIDDEN i2 j

Solving: 
2) i1=j ; i1!=i2 ; select(a,j)=v1 ; v1!=select(a,j) ; i2!=j ; i1=j

SF = {i1=0, i2=2, j=1, select_a=3, v1=4}
MERGE i1 j
P1: {}
P2: {select_a(j)}
UNION i1 j
MERGE select_a(j) v1
FORBIDDEN select_a(j) v1

Solving: 
3) i1=j ; i1!=i2 ; select(a,j)=v1 ; select(a,j)!=select(a,j) ; i2!=j ; i1!=j

SF = {i1=0, i2=2, j=1, select_a=3, v1=4}
CONFLICT: select_a(j) select_a(j)
UNSAT

Elapsed Time: 0.0 seconds